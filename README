-=-=-=-=-=-=-=-

 .:[ chaos ]:.
 
-=-=-=-=-=-=-=-

 - by stagas -
   
---------------

chaos is a filesystem hash based database for node.js

why chaos? because we exploit the sha1 chaotic randomness to store the keys evenly in the filesystem.



the idea: 
---------

the first 2 characters of the sha1 hash of a key become the top dir in the tree, the next 1 becomes the
child dir in the tree and the rest of the hash becomes the filename. This means that the 1st time you
create a database, it will create 4,096 directories so it can then store keys/files in them. it
also means that while the sha1 has trillions of combinations, the filesystem has limitations way lower
than that. It depends on the filesystem but in general, but my guess is that less than 30,000 files in 
a folder should perform really well. This translates to a max 122,880,000 keys. Cool, eh?
Plus you can store any utf8 string or number you want, it's just a proxy to fs.readFile() and fs.writeFile().



installation:
-------------

npm install chaos



usage:
------

var db = require('chaos')('mydbname')



commands:
---------

Set key value pair:
  db.set(key, val, function(err) {})

  
Get the value of a key:
  db.get(key, function(err, val) {})

  
Delete a key:
  db.del(key, function(err) {})

  
Increment a key:
  db.incr(key, function(err, new_number) {})

  If a key doesn't exist or its value isn't a number it will be created starting from 0. Therefore will return 1

  
Decrement a key:
  db.decr(key, function(err, new_number) {})
  
  If a key doesn't exist or its value isn't a number it will be created starting from 0. Therefore will return -1

  
Get a key's value and set another afterwards:
  db.getset(key, val, function(err, old_val) {})
  
  
Get a key's value and delete it afterwards:
  db.getdel(key, function(err, val) {})
  
  
Get a key's value or if it doesn't exist, set the value and get it afterwards:
  db.getorsetget(key, default_value, function(err, val) {})
  
  
  
future:
-------

- better tests
- optimizations maybe
- who knows?

it's still just a proof of concept, no real life tests are done.
contributions are welcome! :)

questions? Find me on Twitter @stagas and IRC freenode.net #node.js as stagas
